=============
Code overview
=============

At the top-level, the :code:`bilby_pipe` module can be described as follows:

.. graphviz::

   digraph {
         "bilby_pipe" -> "main";
         "bilby_pipe" -> "webpages";
         "bilby_pipe" -> "utils";
            }

each submodule (e.g., :code:`bilby_pipe.webpages`) serves a different purpose.
On this page, we'll give a short description of the general code structure.
Specific details for different modules can then be found by following the
links in the `Submodules API`_.

Workflow
--------

The typical workflow for `bilby_pipe` is that a user called the
:code:`bilby_pipe` command line tool giving it some "User input". Typically,
this is of the form of an `ini file <ini_file.txt>`_, and any extra command
line arguments. This user input is handled by the `bilby_pipe.main <main.txt>`_
module (which provides the command-line interface). It generates two types of
output, "DAG files" and a "summary webpage" (if requested). I.e., the top-level
workflow looks like this:

.. graphviz::

   digraph {
         rankdir="LR";
         "User input" -> "bilby_pipe.main";
         "bilby_pipe.main" -> "DAG files";
         "bilby_pipe.main" -> "summary webpage";
            }

DAG files
---------
The "DAG files" generated by `bilby_pipe.main <main.txt>`_ are the usual condor
submission scripts, but with a field :code:`executable` which points to a
special executable script defined in the user-input. For documentation on how
these executables work, see `script_helper <script_helper.txt>`_.

Summary webpage
---------------

If requested by the user, a summary webpage of the job is created. For help
with how the :code:`bilby_pipe.webpages` module enabled this, see `webpages
<webpages.txt>`_.

Submodules API
--------------
.. toctree::
   :maxdepth: 3

   main
   webpages
   utils
