=============
Code overview
=============

User interface
--------------

`Installing <installation.txt>`_ the :code:`bilby_pipe` module provides the
user with four command line programs:

1. `bilby_pipe <main.txt>`_
2. `bilby_pipe_generation <data_generation.txt>`_
3. `bilby_pipe_analysis <data_analysis.txt>`_
4. `bilby_pipe_create_injection_file <create_injections.txt>`_

For most users, only the first of these will be used in practise.

Modules
-------

At the top-level, the :code:`bilby_pipe` python package provides several
sub-modules as visualised here:

.. graphviz::

   digraph {
         "bilby_pipe" -> ".main";
         "bilby_pipe" -> ".data_generation";
         "bilby_pipe" -> ".data_analysis";
         "bilby_pipe" -> ".create_injections";
         "bilby_pipe" -> ".webpages";
         "bilby_pipe" -> ".utils";
            }

each submodule (e.g., :code:`bilby_pipe.webpages`) serves a different purpose.
On this page, we'll give a short description of the general code structure.
Specific details for different modules can then be found by following the
links in the `Submodules API`_.

Workflow
--------

The typical workflow for `bilby_pipe` is that a user calls the
:code:`bilby_pipe` command line tool giving it some "User input". Typically,
this is of the form of an `ini file <ini_file.txt>`_, and any extra command
line arguments. This user input is handled by the `bilby_pipe.main <main.txt>`_
module (which provides the command-line interface). It generates two types of
output, "DAG files" and a "summary webpage" (if requested). I.e., the top-level
workflow looks like this:

.. graphviz::

   digraph {
         rankdir="LR";
         "User input" -> "bilby_pipe.main";
         "bilby_pipe.main" -> "DAG files";
         "bilby_pipe.main" -> "summary webpage";
            }

DAG files
---------
The "DAG files" generated by `bilby_pipe.main <main.txt>`_ are the usual condor
submission scripts. In general, all :code:`bilby_pipe` DAGs will look something
like this

.. graphviz::

   digraph {
         rankdir="TD";
         "Data Generation" -> "Data Analysis 1";
         "Data Generation" -> "Data Analysis 2";
         "Data Generation" -> "...";
         "Data Generation" -> "Data Analysis N";
         "Data Analysis 1" -> "post-processing";
         "Data Analysis 2" -> "post-processing";
         "..." -> "post-processing";
         "Data Analysis N" -> "post-processing";
            }

The "Data Generation" job uses the `bilby_pipe_generation <data_generation.txt>`_
executable to create all the data which may be analysed.

Summary webpage
---------------

If requested by the user, a summary webpage of the job is created. For help
with how the :code:`bilby_pipe.webpages` module enabled this, see `webpages
<webpages.txt>`_.

Submodules API
--------------
.. toctree::
   :maxdepth: 3

   main
   data_generation
   data_analysis
   create_injections
   webpages
   utils
