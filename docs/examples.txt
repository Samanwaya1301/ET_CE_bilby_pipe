========
Examples
========

In this page we list some example ini files are explain their particularities.


Trigger time
------------
The :code:`trigger-time` data-generation method is the easiest way to run on an
event or particular time of interest. Simply specify the GPS trigger time in
the ini file, for example here is an ini file for running on GW150914

.. literalinclude:: ../examples/GW150914.ini


Running on GPS times
--------------------

Here is an example ini file for running on a list of GPS times

.. literalinclude:: ../examples/gps_times.ini

Note, the ini file provides an argument :code;`gps-file` which points to a file
`gps_times.txt` which is a simple list of the GPS times to use. Here are
its contents:

.. literalinclude:: ../examples/gps_times.txt

Running on injections in Gaussian noise
---------------------------------------

:code:`bilby_pipe` provides a set of tools for creating and analysing an
injection set. Here is an example of an ini file for generating and analysing
three injections. The injections are generated by drawing :code:`n-injection`
samples from the prior.

.. literalinclude:: ../examples/bbh_injection.ini

The prior is specified by a bilby prior file :code:`bbh_reduced.prior`:

.. literalinclude:: ../examples/bbh_reduced.prior

Running :code:`bilby_pipe` with this ini file

.. code-block:: console

   $ bilby_pipe bbh_injection.ini

will produce a bilby_pipe :code:`injection_file`. This can be found in the
:code:`data` directory of the output. It is a simple pandas dataframe stored
in the json format containing the parameters of the injection(s).

Running on GraceDb events
-------------------------

The :code:`bilby_pipe` code itself does not run directly on GraceDB event IDs.
Instead, we provide a command line tool :code:`bilby_pipe_gracedb` which
generates ini files and automates the process of determining the relevant
prior (the output ini file can subsequently be edited as the user wants).

This command line program automates the retrieval of the trigger time and 
chirp mass of the event and writes an appropriate ini based on these 
parameters.

GraceDB ID vs GraceDB coinc file 
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The user can pass either a GraceDB ID :code:`--gracedb` or a coinc.json file
:code:`--coinc` of an event to obtain to generate an appropriate ini file 
(note, the coinc file should contain the same information that is retrieved
from GraceDB using the event ID).

For example, running :code:`bilby_pipe_gracedb` with the following GraceDB ID

.. code-block:: console

   $ bilby_pipe_gracedb --gracedb G298936

will produce an appropriate ini file for that event and a submission file 
that can be submitted using :code:`--submit`). This method will also write a 
json format file that has information of the event from GraceDB.

If you have a coinc json file for an event with the following format,

.. literalinclude:: ../examples/G298936.json

by running :code:`bilby_pipe_gracedb` with the path to the coinc file,

.. code-block:: console

   $ bilby_pipe_gracedb --coinc G298936.json

will also generate an ini file.

Both of the above commands will produce the following ini,

.. literalinclude:: ../examples/G298936.ini

given we have generated the ini file based on the same event, G298936.

Selecting GraceDB-url
^^^^^^^^^^^^^^^^^^^^^

To access GraceDB events the user needs to select the correct service url 
to retrieve the event details. The service url will point to either the 
main GraceDB page OR the GraceDB-playground page.

.. code-block:: text

   GraceDB url: "https://gracedb.ligo.org/api/"
   GraceDB-playground url: "https://gracedb-playground.ligo.org/api/"

If a :code:`--gracedb-url` is not specified the default url is set to 
:code:`https://gracedb.ligo.org/api/`
