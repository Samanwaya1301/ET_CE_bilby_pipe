============
Installation
============

Singularity
-----------

Installing :code:`bilby_pipe` should only be required if you are developing or
testing. For most users, and in particular production-use, we recommend using a
`singularity image <singularity.txt>`_.

Installing bilby_pipe from pip
------------------------------

To install the latest :code:`bilby_pipe` release from `PyPi
<https://pypi.org/project/bilby-pipe/>`, run

.. code-block:: console

   $ pip install --upgrade bilby_pipe

Note, that this released version usually lags the development version. If you
need to test the latest features, see below for how to obtain this.


Install bilby_pipe for development
----------------------------------

:code:`bilby_pipe` is developed and tested for Python 3.5, 3.6, and 3.7. In the
following, we demonstrate how to install a development version of
:code:`bilby_pipe` on a LIGO Data Grid (LDG) cluster.

First off, you'll need to clone the repository

.. code-block:: console

   $ git clone git@git.ligo.org:lscsoft/bilby_pipe.git
   $ cd bilby_pipe/

.. note::
   If you do not have a git.ligo account, and recieve an error message:

   .. code-block:: console

      git@git.ligo.org: Permission denied (publickey,gssapi-keyex,gssapi-with-mic).
      fatal: Could not read from remote repository.

   Then you need to use the HTTPS URL, e.g., replace the first line above with

   .. code-block:: console

      $ git clone https://git.ligo.org/lscsoft/bilby.git

Once you have cloned the repository, you need to install the software. How you
do this will depend on the python installation you intend to use. Below are
several easy-to-use options. Feel free to disregard these should you already
have an alternative.

CVMFS conda python
==================

To source a :code:`Python 3.7` installation on the LDG using CVMFS, run the
commands

.. code-block:: console

   $ source /cvmfs/ligo-containers.opensciencegrid.org/lscsoft/conda/latest/etc/profile.d/conda.sh 
   $ conda activate ligo-py37

Using virtualenv
================

Virtualenv is a similar tool to conda. To obtain an environment, run

.. code-block:: console

   virtualenv --python=/usr/bin/python3.6 $HOME/virtualenvs/bilby_pipe
   source virtualenvs/bilby_pipe/bin/activate


Installing bilby_pipe
=====================

Once you have a working version of :code:`python`, you can install
:code:`bilby_pipe` with the command

.. code-block:: console

   $ pip install --upgrade git+file://${HOME}/PATH/TO/bilby_pipe

Or, alternatively

.. code-block:: console

   $ python setup.py install

The former (using :code:`pip`) is preferred as it makes it easier to uninstall,
but many people use the direct installation method out of habit.

Be careful to check any warning messages about where the code has been
installed.

Additionally, if you recieve error messages about read-only file systems you
can add :code:`--user` to the installtion call. This will install the software
in a local directory, usually :code:`~/.local`. Be aware that this may not be
on your :code:`PATH` and also, that this will effect all python environments.

Once you have run these steps, you have :code:`bilby_pipe` installed. However,
you will also need to install `bilby <https://git.ligo.org/lscsoft/bilby>`_.
Installation instructions can be found `here
<https://lscsoft.docs.ligo.org/bilby/installation.html>`_.

Whilst the code is developed, we expect to find many bugs. These can either be
in bilby_pipe or in bilby. To debug the problem it is useful to know which
version of the code you are using.

To see which version of the code you are using, call

.. code-block:: console

  $ bilby_pipe --version

If the output of :code:`bilby_pipe --version` contains something like

.. code-block:: console

  bilby_pipe 0.0.1: (UNCLEAN) 3fd2820 2019-01-01 15:08:26 -0800

rather than

.. code-block:: console

  bilby_pipe 0.0.1:

Then you have installed :code:`bilby_pipe` from source. This information is
also printed everytime the code is called and therefore will be at the top of
your log files.


Working with time-domain inteferometer data
-------------------------------------------

:code:`bilby_pipe` handles data from the interferometers using the `gwpy
<https://gwpy.github.io/docs/stable/timeseries/remote-access.html>`_ library.
When requesting data, we first look for local frame-files, then use the `NDS2
<https://www.lsc-group.phys.uwm.edu/daswg/projects/nds-client/doc/manual/>`_
library to fetch properitary data remotely, finally we search the open data.

To best utilise this tool, you should ensure your python installation has
access to `LDAS-tools <https://anaconda.org/conda-forge/ldas-tools-framecpp>`_
for local frame-file lookup and `NDS2
<https://anaconda.org/conda-forge/python-nds2-client>`_ for properietary remote
data look up. These libraries are typically part of most LIGO data stacks and
can be installed with conda using the commands

.. code-block:: console

   $ conda install -c conda-forge python-ldas-tools-framecpp
   $ conda install -c conda-forge python-nds2-client



