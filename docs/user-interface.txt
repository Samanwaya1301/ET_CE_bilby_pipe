================
Using bilby_pipe
================

Command line interface
----------------------

The primary user-interface for this code is a command line tool
:code:`bilby_pipe` which is available after following the `installation
instructions <installation.txt>`_. To see help for this tool, use

.. code-block:: console

   $ bilby_pipe --help


Which will produce something like the following output

.. highlight:: none

.. argparse::
   :ref: bilby_pipe.main.create_parser
   :prog: bilby_pipe
   :noepilog:

..

.. note::

   If you are using a `singularity image <singularity.txt>`_, you will need to
   replace :code:`bilby_pipe` with :code:`./PATH/TO/THE/IMAGE.simg` unless you
   define an alias.

Running bilby_pipe
------------------

To run :code:`bilby_pipe`, you first need to define an define an ini file.
Help for the syntax of this file can be found `here <ini_file.txt>`_ and
examples for different types of runs can be found below.

Once you have an ini file (for the purpose of clarity, lets say
:code:`my-run.ini`, you initialize your job with

.. code-block:: console

   $ bilby_pipe my-run.ini

This will produce a directory stucture as follows:

.. code-block:: console

   my-run.ini
   outdir/
     -> data/
     -> data_analysis_log/
     -> data_generation_log/
     -> result/
     -> results_page_log/
     -> submit/

The first five of these folders will initially be empty, but as the job
progresses will be populated. The :code:`data` directory will contain all the
data to be analyses while :code:`result` will contain the `h5` result files
generated by bilby along with any plots.

The final folder, :code:`submit`, contains all the of the DAG submission
scripts. To submit your job, run :code:`condor_submit_dag` giving as a
first argument the file prepended with :code:`dag` under :code:`outdir/submit`.
Alternatively, you can initialise and submit your jobs with

.. code-block:: console

   $ bilby_pipe my-run.ini --submit

Running on GraceDB events
-------------------------

Here is an example ini file for running on the GraceDB event GW150915, which
is the entry for GW150915.

.. literalinclude:: ../example_ini_files/GW150914.ini

Running on GPS times
--------------------

Here is an example ini file for running on a list of GPS times

.. literalinclude:: ../example_ini_files/gps_times.ini

Note, the ini file provides an argument `gps-times` which points to a file
`gps_times.txt` which is a simple list of the GPS times to analyse. Here are
its contents:

.. literalinclude:: ../example_ini_files/gps_times.txt

Running on injections
---------------------

:code:`bilby_pipe` provides a set of tools for creating and analysing an
injection set. Here is an example of an ini file for generating and analysing
three injections. The injections are generated by drawing :code:`n-injection`
samples from the prior.

.. literalinclude:: ../example_ini_files/bbh_injection.ini

The prior is specified by a bilby prior file :code:`bbh_reduced.prior`:

.. literalinclude:: ../example_ini_files/bbh_reduced.prior


Running :code:`bilby_pipe` with this ini file

.. code-block:: console

   $ bilby_pipe bbh_injection.ini

will produce a bilby_pipe :code:`injection_file`. This can be found in the
:code:`data` directory of the output. It is a simple pandas dataframe
containing the parameters of the injection.

